# Copyright IBM Corp, 2016
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.

"""
Django settings for client project.

Generated by 'django-admin startproject' using Django 1.9.6.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os
import ldap
import secret
from django_auth_ldap.config import LDAPSearch
from django_auth_ldap.config import LDAPSearchUnion
from django_auth_ldap.config import GroupOfNamesType
import project.projectdata.settings as dataSettings

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = secret.SECRET_KEY

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'account',
    'project',
    'project.projectdata.scm_git',
    'project.projectdata.builder_shell',
    'project.projectdata.project_travis',
    'partner',
    'multipleselection',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'handlers': {
#         'file': {
#             'level': 'ERROR',
#             'class': 'logging.FileHandler',
#             'filename': '/var/log/client/client.log'
#         },
#     },
#     'loggers': {
#         'client': {
#             'handlers': ['file'],
#             'level': 'ERROR',
#             'propagate': True
#         }
#     }
# }
ROOT_URLCONF = 'client.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'client.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'clientdb', 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.' +
                'UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.' +
                'MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.' +
                'CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.' +
                'NumericPasswordValidator',
    },
]


# Authentication backend
# https://docs.djangoproject.com/en/1.9/ref/settings/#authentication-backends
# https://pythonhosted.org/django-auth-ldap/install.html
AUTHENTICATION_BACKENDS = [
    'django_auth_ldap.backend.LDAPBackend',
]


# LDAP authentication settings
# https://pythonhosted.org/django-auth-ldap/authentication.html
LDAP_ROOT_DN = 'dc=example,dc=com'
AUTH_LDAP_SERVER_URI = secret.LDAP_URI
AUTH_LDAP_START_TLS = True
LDAP_CACERTFILE = '/etc/ssl/certs/ca-chain.pem'
AUTH_LDAP_GLOBAL_OPTIONS = {
    ldap.OPT_X_TLS_REQUIRE_CERT: ldap.OPT_X_TLS_DEMAND,
    ldap.OPT_X_TLS_CACERTFILE: LDAP_CACERTFILE,
}
AUTH_LDAP_BIND_AS_AUTHENTICATING_USER = True
AUTH_LDAP_BIND_DN = secret.LDAP_BIND_DN
AUTH_LDAP_BIND_PASSWORD = secret.LDAP_BIND_PASSWORD

AUTH_LDAP_USER_SEARCH = LDAPSearchUnion(
    LDAPSearch('ou=Users,' + LDAP_ROOT_DN,
               ldap.SCOPE_SUBTREE, '(uid=%(user)s)'),
    LDAPSearch('ou=Users,' + LDAP_ROOT_DN,
               ldap.SCOPE_SUBTREE, '(mail=%(user)s)')
)
AUTH_LDAP_USER_ATTR_MAP = {
    'username': 'uid',
    'first_name': 'cn',
    'last_name': 'sn',
    'email': 'mail'
}

AUTH_LDAP_GROUP_SEARCH = LDAPSearch(
    'ou=Groups,' + LDAP_ROOT_DN,
    ldap.SCOPE_SUBTREE, '(objectClass=groupOfNames)'
)
AUTH_LDAP_GROUP_TYPE = GroupOfNamesType(name_attr='cn')
LDAP_USER_DN_TEMPLATE = 'uid=%s,ou=Users,' + LDAP_ROOT_DN
LDAP_GROUP_DN_TEMPLATE = 'cn=%s,ou=Groups,' + LDAP_ROOT_DN


# Gearman options
GEARMAN_HOST = '192.168.122.231'
GEARMAN_PORT = 4730
GEARMAN_SSH_PORT = '2200'
GEARMAN_SSH_USER = 'client'


# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

REMOVE_DANGLING_PROJECTS = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/
STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

LOGIN_URL = '/account/signin'

dataSettings.DATA_LIST = {
    'shell_script': [
        'project.projectdata.scm_git.base.ScmGitData',
        'project.projectdata.builder_shell.base.BuilderShellData',
    ],
    'travis_project': [
        'project.projectdata.project_travis.base.ProjectTravisData',
    ],
}

dataSettings.PROJECT_TYPES = {
    'shell_script': 'Write a shell script to build my project.',
    'travis_project': 'Your project has a .travis.yml file.',
}

# vim:set ft=python:
