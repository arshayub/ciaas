/*
 * Copyright IBM Corp, 2016
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

import com.nirima.jenkins.plugins.docker.DockerCloud
import com.nirima.jenkins.plugins.docker.DockerTemplate
import com.nirima.jenkins.plugins.docker.DockerTemplateBase
import com.nirima.jenkins.plugins.docker.strategy.DockerCloudRetentionStrategy
import com.nirima.jenkins.plugins.docker.launcher.DockerComputerSSHLauncher
import hudson.plugins.sshslaves.SSHConnector
import jenkins.model.Jenkins


ArrayList<DockerTemplate> templates = new ArrayList<DockerTemplate>()


DockerTemplate debianTemplate = new DockerTemplate(
    new DockerTemplateBase( //DockerTemplateBase
        'ddiorio/slave-debian:latest', // image
        '', // dnsString
        '/usr/sbin/sshd -D', // dockerCommand
        '', // volumesString
        '', // volumesFromString
        '', // environmentsString
        '', // lxcConfString
        '', // hostname
        2048, // memoryLimit
        2048, // memorySwap
        2, // cpuShares
        '', // bindPorts
        false, // bindAllPorts
        false, // privileged
        false, // tty
        '' // macAddress
    ),
    'ppc64le-debian-jessie', // labelString
    '', // remoteFs
    '', // remoteFsMapping
    '50'// instanceCapStr
)
debianTemplate.setRetentionStrategy(
    new DockerCloudRetentionStrategy(0) // Idle minutes
)
debianTemplate.setLauncher(
    new DockerComputerSSHLauncher(
        new SSHConnector(22, 'ssh-jenkins', null, null, null, null, null)
    )
)
templates.add(debianTemplate)


DockerCloud docker = new DockerCloud(
    'docker', // name
    templates, // templates
    'http://{{ using_docker_host }}:{{ using_docker_port }}', // serverUrl
    '400', // containerCapStr
    5, // connectTimeout
    15, // readTimeout
    '', // credentialsId
    ''  // version
)


Jenkins.instance.clouds.add(docker)
Jenkins.instance.save()

// vi: set ft=groovy :
